{
  "Struct Definition": {
    "prefix": "struct",
    "body": [
      "struct ${1:Name} {",
      "\t${2:field}: ${3:type};",
      "}"
    ],
    "description": "Create a new struct"
  },
  "Generic Struct": {
    "prefix": "structg",
    "body": [
      "struct ${1:Container}<${2:T}> {",
      "\t${3:value}: ${2:T};",
      "}"
    ],
    "description": "Create a generic struct"
  },
  "Trait Definition": {
    "prefix": "trait",
    "body": [
      "trait ${1:Name} {",
      "\t${2:method}(${3:param}: ${4:type}): ${5:returnType};",
      "}"
    ],
    "description": "Create a new trait"
  },
  "Generic Trait": {
    "prefix": "traitg",
    "body": [
      "trait ${1:Container}<${2:T}> {",
      "\t${3:method}(${4:param}: ${2:T}): ${5:returnType};",
      "}"
    ],
    "description": "Create a generic trait"
  },
  "Implementation Block": {
    "prefix": "impl",
    "body": [
      "impl ${1:StructName} {",
      "\t${2:method}(${3:params}) {",
      "\t\t${4:// implementation}",
      "\t}",
      "}"
    ],
    "description": "Create an implementation block"
  },
  "Trait Implementation": {
    "prefix": "implfor",
    "body": [
      "impl ${1:TraitName} for ${2:StructName} {",
      "\t${3:method}(${4:params}) {",
      "\t\t${5:// implementation}",
      "\t}",
      "}"
    ],
    "description": "Implement a trait for a struct"
  },
  "Generic Implementation": {
    "prefix": "implg",
    "body": [
      "impl<${1:T}> ${2:TraitName}<${1:T}> for ${3:StructName}<${1:T}> {",
      "\t${4:method}(${5:params}) {",
      "\t\t${6:// implementation}",
      "\t}",
      "}"
    ],
    "description": "Generic trait implementation"
  },
  "Let Binding": {
    "prefix": "let",
    "body": [
      "let ${1:variable} = ${2:value}"
    ],
    "description": "Create a let binding"
  },
  "Let with Pipe": {
    "prefix": "letp",
    "body": [
      "let ${1:variable} = ${2:value}",
      "${1:variable} |> ${3:function}"
    ],
    "description": "Let binding with pipe operation"
  },
  "Pipe Chain": {
    "prefix": "pipe",
    "body": [
      "${1:value}",
      "\t|> ${2:function1}",
      "\t|> ${3:function2}",
      "\t|> ${4:function3}"
    ],
    "description": "Multi-line pipe chain"
  },
  "Simple Pipe": {
    "prefix": "|>",
    "body": [
      "|> ${1:function}"
    ],
    "description": "Pipe operator"
  },
  "Console Log Pipe": {
    "prefix": "log",
    "body": [
      "${1:value} |> console.log"
    ],
    "description": "Pipe to console.log"
  },
  "Function with Pipes": {
    "prefix": "funcp",
    "body": [
      "function ${1:name}(${2:params}) {",
      "\tlet ${3:result} = ${4:value}",
      "\t\t|> ${5:transform1}",
      "\t\t|> ${6:transform2};",
      "\t",
      "\treturn ${3:result};",
      "}"
    ],
    "description": "Function using pipe operations"
  },
  "Britescript File Header": {
    "prefix": "bsheader",
    "body": [
      "// ${1:filename} - ${2:description}",
      "// Written in Britescript! ðŸš€",
      "",
      "${3:// Your Britescript code here}"
    ],
    "description": "Standard Britescript file header"
  },
  "Export Struct": {
    "prefix": "exports",
    "body": [
      "export struct ${1:Name} {",
      "\t${2:field}: ${3:type};",
      "}"
    ],
    "description": "Export a struct"
  },
  "Export Trait": {
    "prefix": "exportt",
    "body": [
      "export trait ${1:Name} {",
      "\t${2:method}(${3:param}: ${4:type}): ${5:returnType};",
      "}"
    ],
    "description": "Export a trait"
  },
  "Import Types": {
    "prefix": "importt",
    "body": [
      "import { ${1:Type1}, ${2:Type2} } from \"${3:module}\";"
    ],
    "description": "Import types from module"
  },
  "Method with Return Type": {
    "prefix": "method",
    "body": [
      "${1:methodName}(${2:param}: ${3:type}): ${4:returnType} {",
      "\t${5:// implementation}",
      "\treturn ${6:value};",
      "}"
    ],
    "description": "Method with explicit return type"
  },
  "Async Method": {
    "prefix": "async",
    "body": [
      "async ${1:methodName}(${2:param}: ${3:type}): Promise<${4:returnType}> {",
      "\t${5:// implementation}",
      "\treturn ${6:value};",
      "}"
    ],
    "description": "Async method with Promise return type"
  },
  "React Component": {
    "prefix": "rfc",
    "body": [
      "struct ${1:Component}Props {",
      "\t${2:prop}: ${3:type};",
      "}",
      "",
      "export function ${1:Component}(props: ${1:Component}Props) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t${4:<h1>{props.${2:prop}}</h1>}",
      "\t\t</div>",
      "\t);",
      "}"
    ],
    "description": "React functional component with Britescript struct props"
  },
  "React Component with Hooks": {
    "prefix": "rfch",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "struct ${1:Component}Props {",
      "\t${2:prop}: ${3:type};",
      "}",
      "",
      "export function ${1:Component}(props: ${1:Component}Props) {",
      "\tlet [${4:state}, set${4/(.*)/${4:/capitalize}/}] = useState<${5:StateType}>(${6:initialValue});",
      "",
      "\tuseEffect(() => {",
      "\t\t${7:// effect logic}",
      "\t}, []);",
      "",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t${8:<h1>{props.${2:prop}}</h1>}",
      "\t\t</div>",
      "\t);",
      "}"
    ],
    "description": "React component with hooks and Britescript struct props"
  },
  "JSX Element": {
    "prefix": "jsx",
    "body": [
      "<${1:div}>",
      "\t${2:content}",
      "</${1:div}>"
    ],
    "description": "JSX element"
  },
  "JSX Fragment": {
    "prefix": "frag",
    "body": [
      "<>",
      "\t${1:content}",
      "</>"
    ],
    "description": "JSX fragment"
  },
  "React Props Interface": {
    "prefix": "props",
    "body": [
      "struct ${1:Component}Props {",
      "\t${2:children}?: React.ReactNode;",
      "\t${3:className}?: string;",
      "\t${4:prop}: ${5:type};",
      "}"
    ],
    "description": "React component props struct with common properties"
  },
  "Custom Hook": {
    "prefix": "hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "struct Use${1:Hook}Options {",
      "\t${2:option}: ${3:type};",
      "}",
      "",
      "struct Use${1:Hook}Return {",
      "\t${4:value}: ${5:type};",
      "\t${6:method}: () => void;",
      "}",
      "",
      "export function use${1:Hook}(options: Use${1:Hook}Options): Use${1:Hook}Return {",
      "\tlet [${4:value}, set${4/(.*)/${4:/capitalize}/}] = useState<${5:type}>(${7:initialValue});",
      "",
      "\tlet ${6:method} = () => {",
      "\t\t${8:// method implementation}",
      "\t};",
      "",
      "\tuseEffect(() => {",
      "\t\t${9:// effect logic}",
      "\t}, [options.${2:option}]);",
      "",
      "\treturn { ${4:value}, ${6:method} };",
      "}"
    ],
    "description": "Custom React hook with Britescript structs"
  },
  "Event Handler": {
    "prefix": "handler",
    "body": [
      "let handle${1:Event} = (${2:event}: React.${3:MouseEvent}<HTMLElement>) => {",
      "\t${4:// handler logic}",
      "};"
    ],
    "description": "React event handler function"
  },
  "Britescript JSX Component": {
    "prefix": "bsxcomp",
    "body": [
      "import React from 'react';",
      "",
      "struct ${1:Component}Props {",
      "\t${2:prop}: ${3:type};",
      "\tchildren?: React.ReactNode;",
      "}",
      "",
      "trait ${4:Behavior} {",
      "\t${5:method}(): ${6:type};",
      "}",
      "",
      "impl ${4:Behavior} for ${1:Component}Props {",
      "\t${5:method}() {",
      "\t\t${7:// implementation}",
      "\t}",
      "}",
      "",
      "export function ${1:Component}(props: ${1:Component}Props) {",
      "\tlet ${8:value} = props.${2:prop}",
      "\t\t|> ${9:transform}",
      "\t\t|> ${10:format};",
      "",
      "\treturn (",
      "\t\t<${11:div}>",
      "\t\t\t{${8:value}}",
      "\t\t\t{props.children}",
      "\t\t</${11:div}>",
      "\t);",
      "}"
    ],
    "description": "Complete Britescript JSX component with struct, trait, and impl"
  },
  "Britescript JSX File Template": {
    "prefix": "bsxfile",
    "body": [
      "// ${1:ComponentName}.bsx - Britescript JSX Component",
      "// Written in Britescript with JSX! ðŸš€",
      "",
      "import React from 'react';",
      "",
      "struct ${1:ComponentName}Props {",
      "\ttitle: string;",
      "\tchildren?: React.ReactNode;",
      "}",
      "",
      "export function ${1:ComponentName}(props: ${1:ComponentName}Props) {",
      "\tlet message = \"Hello from \" + props.title",
      "\tmessage |> console.log",
      "",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t<h1>{props.title}</h1>",
      "\t\t\t{props.children}",
      "\t\t</div>",
      "\t);",
      "}",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Complete Britescript JSX file template"
  },
  "useState with Pipes": {
    "prefix": "usestatep",
    "body": [
      "let [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:type}>(${3:initialValue});",
      "",
      "let handle${4:Action} = () => {",
      "\tlet newValue = ${1:state}",
      "\t\t|> ${5:transform}",
      "\t\t|> ${6:validate};",
      "\tset${1/(.*)/${1:/capitalize}/}(newValue);",
      "};"
    ],
    "description": "useState hook with pipe operations"
  },
  "useEffect with Pipes": {
    "prefix": "useeffectp",
    "body": [
      "useEffect(() => {",
      "\tlet ${1:data} = ${2:source}",
      "\t\t|> ${3:transform}",
      "\t\t|> ${4:process};",
      "\t",
      "\t${1:data} |> console.log;",
      "\t",
      "\treturn () => {",
      "\t\t${5:// cleanup}",
      "\t};",
      "}, [${6:dependencies}]);"
    ],
    "description": "useEffect hook with pipe operations"
  }
}